openapi: 3.0.2
info:
  description: "This is the API for smart home adapter clients."
  version: "0.1.0"
  title: "Smart Home Adapters"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"
paths:
  /robots:
    get:
      description: Gets all the robots registered to the current user
      responses:
        '200':
          description: List of the users robots
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Robots'
  /robot/{robotId}:
    post:
      description: Registers a robot to the users account
      parameters:
      - in: query
        name: nickname
        description: "Nickname for the new robot"
        schema:
          type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Robot'
    get:
      description: Gets a robot
      responses:
        '200':
          description: The robot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Robot'
    patch:
      description: Updates a robot
      parameters:
      - in: query
        name: nickname
        description: Updated robot nickname
        schema:
          type: string
      responses:
        '200':
          description: The updated robot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Robot'
    delete:
      description: Unregisters the robot from the users account
      responses:
        '200':
          description: The unregisted robot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Robot'
    parameters:
    - in: path
      name: robotId
      description: ID of robot
      schema:
        type: string
  /robot/{robotId}/toggle/{value}:
    patch:
      description: Toggles a robot (e.g a switch on/off)
      parameters:
      - in: path
        name: value
        description: Value to toggle too
        schema:
          type: bool
    parameters:
    - in: path
      name: robotId
      description: ID of robot
      schema:
        type: string
  /robot/{robotId}/range/{value}:
    patch:
      description: Sets a robot with range (e.g set thermostat to temperature)
      parameters:
      - in: path
        name: value
        description: Value to set
        schema:
          type: bool
    parameters:
    - in: path
      name: robotId
      description: ID of robot
      schema:
        type: string
  /robot/{robotId}/calibration:
    get:
      description: Gets the current calibration parameters of the robot
      reponses:
        '200':
        description: The parameters and parameter types of the robot
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomCalibration'
    post:
      description: Change values of robot's calibration parameters
      parameters:
      - in: query
        name: calibrationParameters
        description: "New calibration parameter values"
        schema:
          $ref: '#/components/schemas/CustomCalibration'
    put:
      description: Change robot's calibration parameters
      parameters:
      - in: query
        name: calibrationParameters
        description: "New calibration parameters"
        schema:
          $ref: '#/components/schemas/CustomCalibration'
    parameters:
    - in: path
      name: robotId
      description: ID of robot
      schema:
        type: string
  /robot/{robotId}/calibration/test:
    get:
    parameters:
    - in: path
      name: robotId
      description: ID of robot
      schema:
        type: string
  /usecases:
    get:
      description: Gets all usecases
      responses:
        '200':
        description: The usecases
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usecase'
  /usecase/{usecaseId}:
    get:
      description: Gets the usecase corresponding to the supplied ID
      responses:
        '200':
        description: The usecase
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usecase'
    parameters:
    - in: path
      name: usecasId
      description: ID of usecase
      schema:
        type: string
  /robot/{robotId}/usecase/{usecaseId}:
    post:
      description: Registers a usecase to a robot
      parameters:
      - in: path
        name: usecaseId
        description: The usecase ID
        schema:
          type: string
    parameters:
    - in: path
      name: robotId
      description: ID of robot
      schema:
        type: string
    
  
components:
  schemas:
    Robots:
       type: array
       items:
        $ref: '#/components/schemas/Robot'
    Usecase:
      type: object
      properties:
        notSure : string
    CustomCalibration:
      type: object
      properties:
        notSure : string
    Robot:
      type: object
      properties:
        id:
          type: string
        nickname:
          type: string
        interface:
          type: object
          properties:
            type:
              type: string
              pattern: toggle|range
              description: What interface to show (toggle button or slider)
            min:
              type: number
              description: Minimum value of slider
            max:
              type: number
              description: Maximum value of slider
