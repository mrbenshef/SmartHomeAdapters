// Code generated by protoc-gen-go. DO NOT EDIT.
// source: usecase-service/usecase-service.proto

package usecase_service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Robot struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Robot) Reset()         { *m = Robot{} }
func (m *Robot) String() string { return proto.CompactTextString(m) }
func (*Robot) ProtoMessage()    {}
func (*Robot) Descriptor() ([]byte, []int) {
	return fileDescriptor_usecase_service_38790134dca44328, []int{0}
}
func (m *Robot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Robot.Unmarshal(m, b)
}
func (m *Robot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Robot.Marshal(b, m, deterministic)
}
func (dst *Robot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Robot.Merge(dst, src)
}
func (m *Robot) XXX_Size() int {
	return xxx_messageInfo_Robot.Size(m)
}
func (m *Robot) XXX_DiscardUnknown() {
	xxx_messageInfo_Robot.DiscardUnknown(m)
}

var xxx_messageInfo_Robot proto.InternalMessageInfo

func (m *Robot) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Status struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_usecase_service_38790134dca44328, []int{1}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (dst *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(dst, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Action struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NewValue             string   `protobuf:"bytes,2,opt,name=newValue,proto3" json:"newValue,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Action) Reset()         { *m = Action{} }
func (m *Action) String() string { return proto.CompactTextString(m) }
func (*Action) ProtoMessage()    {}
func (*Action) Descriptor() ([]byte, []int) {
	return fileDescriptor_usecase_service_38790134dca44328, []int{2}
}
func (m *Action) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Action.Unmarshal(m, b)
}
func (m *Action) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Action.Marshal(b, m, deterministic)
}
func (dst *Action) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Action.Merge(dst, src)
}
func (m *Action) XXX_Size() int {
	return xxx_messageInfo_Action.Size(m)
}
func (m *Action) XXX_DiscardUnknown() {
	xxx_messageInfo_Action.DiscardUnknown(m)
}

var xxx_messageInfo_Action proto.InternalMessageInfo

func (m *Action) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Action) GetNewValue() string {
	if m != nil {
		return m.NewValue
	}
	return ""
}

type IntParameter struct {
	Min                  int64    `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max                  int64    `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	Default              int64    `protobuf:"varint,3,opt,name=default,proto3" json:"default,omitempty"`
	Current              int64    `protobuf:"varint,4,opt,name=current,proto3" json:"current,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IntParameter) Reset()         { *m = IntParameter{} }
func (m *IntParameter) String() string { return proto.CompactTextString(m) }
func (*IntParameter) ProtoMessage()    {}
func (*IntParameter) Descriptor() ([]byte, []int) {
	return fileDescriptor_usecase_service_38790134dca44328, []int{3}
}
func (m *IntParameter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IntParameter.Unmarshal(m, b)
}
func (m *IntParameter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IntParameter.Marshal(b, m, deterministic)
}
func (dst *IntParameter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntParameter.Merge(dst, src)
}
func (m *IntParameter) XXX_Size() int {
	return xxx_messageInfo_IntParameter.Size(m)
}
func (m *IntParameter) XXX_DiscardUnknown() {
	xxx_messageInfo_IntParameter.DiscardUnknown(m)
}

var xxx_messageInfo_IntParameter proto.InternalMessageInfo

func (m *IntParameter) GetMin() int64 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *IntParameter) GetMax() int64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *IntParameter) GetDefault() int64 {
	if m != nil {
		return m.Default
	}
	return 0
}

func (m *IntParameter) GetCurrent() int64 {
	if m != nil {
		return m.Current
	}
	return 0
}

type BoolParameter struct {
	Default              bool     `protobuf:"varint,1,opt,name=default,proto3" json:"default,omitempty"`
	Current              bool     `protobuf:"varint,2,opt,name=current,proto3" json:"current,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BoolParameter) Reset()         { *m = BoolParameter{} }
func (m *BoolParameter) String() string { return proto.CompactTextString(m) }
func (*BoolParameter) ProtoMessage()    {}
func (*BoolParameter) Descriptor() ([]byte, []int) {
	return fileDescriptor_usecase_service_38790134dca44328, []int{4}
}
func (m *BoolParameter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BoolParameter.Unmarshal(m, b)
}
func (m *BoolParameter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BoolParameter.Marshal(b, m, deterministic)
}
func (dst *BoolParameter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoolParameter.Merge(dst, src)
}
func (m *BoolParameter) XXX_Size() int {
	return xxx_messageInfo_BoolParameter.Size(m)
}
func (m *BoolParameter) XXX_DiscardUnknown() {
	xxx_messageInfo_BoolParameter.DiscardUnknown(m)
}

var xxx_messageInfo_BoolParameter proto.InternalMessageInfo

func (m *BoolParameter) GetDefault() bool {
	if m != nil {
		return m.Default
	}
	return false
}

func (m *BoolParameter) GetCurrent() bool {
	if m != nil {
		return m.Current
	}
	return false
}

type CalibrationParameter struct {
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Types that are valid to be assigned to Details:
	//	*CalibrationParameter_IntParameter
	//	*CalibrationParameter_BoolParameter
	Details              isCalibrationParameter_Details `protobuf_oneof:"details"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *CalibrationParameter) Reset()         { *m = CalibrationParameter{} }
func (m *CalibrationParameter) String() string { return proto.CompactTextString(m) }
func (*CalibrationParameter) ProtoMessage()    {}
func (*CalibrationParameter) Descriptor() ([]byte, []int) {
	return fileDescriptor_usecase_service_38790134dca44328, []int{5}
}
func (m *CalibrationParameter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalibrationParameter.Unmarshal(m, b)
}
func (m *CalibrationParameter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalibrationParameter.Marshal(b, m, deterministic)
}
func (dst *CalibrationParameter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalibrationParameter.Merge(dst, src)
}
func (m *CalibrationParameter) XXX_Size() int {
	return xxx_messageInfo_CalibrationParameter.Size(m)
}
func (m *CalibrationParameter) XXX_DiscardUnknown() {
	xxx_messageInfo_CalibrationParameter.DiscardUnknown(m)
}

var xxx_messageInfo_CalibrationParameter proto.InternalMessageInfo

func (m *CalibrationParameter) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CalibrationParameter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CalibrationParameter) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type isCalibrationParameter_Details interface {
	isCalibrationParameter_Details()
}

type CalibrationParameter_IntParameter struct {
	IntParameter *IntParameter `protobuf:"bytes,4,opt,name=intParameter,proto3,oneof"`
}

type CalibrationParameter_BoolParameter struct {
	BoolParameter *BoolParameter `protobuf:"bytes,5,opt,name=boolParameter,proto3,oneof"`
}

func (*CalibrationParameter_IntParameter) isCalibrationParameter_Details() {}

func (*CalibrationParameter_BoolParameter) isCalibrationParameter_Details() {}

func (m *CalibrationParameter) GetDetails() isCalibrationParameter_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *CalibrationParameter) GetIntParameter() *IntParameter {
	if x, ok := m.GetDetails().(*CalibrationParameter_IntParameter); ok {
		return x.IntParameter
	}
	return nil
}

func (m *CalibrationParameter) GetBoolParameter() *BoolParameter {
	if x, ok := m.GetDetails().(*CalibrationParameter_BoolParameter); ok {
		return x.BoolParameter
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CalibrationParameter) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CalibrationParameter_OneofMarshaler, _CalibrationParameter_OneofUnmarshaler, _CalibrationParameter_OneofSizer, []interface{}{
		(*CalibrationParameter_IntParameter)(nil),
		(*CalibrationParameter_BoolParameter)(nil),
	}
}

func _CalibrationParameter_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CalibrationParameter)
	// details
	switch x := m.Details.(type) {
	case *CalibrationParameter_IntParameter:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IntParameter); err != nil {
			return err
		}
	case *CalibrationParameter_BoolParameter:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BoolParameter); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CalibrationParameter.Details has unexpected type %T", x)
	}
	return nil
}

func _CalibrationParameter_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CalibrationParameter)
	switch tag {
	case 4: // details.intParameter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IntParameter)
		err := b.DecodeMessage(msg)
		m.Details = &CalibrationParameter_IntParameter{msg}
		return true, err
	case 5: // details.boolParameter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BoolParameter)
		err := b.DecodeMessage(msg)
		m.Details = &CalibrationParameter_BoolParameter{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CalibrationParameter_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CalibrationParameter)
	// details
	switch x := m.Details.(type) {
	case *CalibrationParameter_IntParameter:
		s := proto.Size(x.IntParameter)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CalibrationParameter_BoolParameter:
		s := proto.Size(x.BoolParameter)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Robot)(nil), "Robot")
	proto.RegisterType((*Status)(nil), "Status")
	proto.RegisterType((*Action)(nil), "Action")
	proto.RegisterType((*IntParameter)(nil), "IntParameter")
	proto.RegisterType((*BoolParameter)(nil), "BoolParameter")
	proto.RegisterType((*CalibrationParameter)(nil), "CalibrationParameter")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SwitchServerClient is the client API for SwitchServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SwitchServerClient interface {
	// registers the robot with this usecase
	SetUsecase(ctx context.Context, in *Robot, opts ...grpc.CallOption) (*empty.Empty, error)
	GetStatus(ctx context.Context, in *Robot, opts ...grpc.CallOption) (*Status, error)
	SetRobot(ctx context.Context, in *Action, opts ...grpc.CallOption) (*empty.Empty, error)
	GetCalibrationParameters(ctx context.Context, in *Robot, opts ...grpc.CallOption) (SwitchServer_GetCalibrationParametersClient, error)
	SetCalibrationParameter(ctx context.Context, in *CalibrationParameter, opts ...grpc.CallOption) (*empty.Empty, error)
	// resets a calibration parameter to its default value
	ResetCalibrationParameter(ctx context.Context, in *CalibrationParameter, opts ...grpc.CallOption) (*empty.Empty, error)
}

type switchServerClient struct {
	cc *grpc.ClientConn
}

func NewSwitchServerClient(cc *grpc.ClientConn) SwitchServerClient {
	return &switchServerClient{cc}
}

func (c *switchServerClient) SetUsecase(ctx context.Context, in *Robot, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/SwitchServer/SetUsecase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchServerClient) GetStatus(ctx context.Context, in *Robot, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/SwitchServer/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchServerClient) SetRobot(ctx context.Context, in *Action, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/SwitchServer/SetRobot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchServerClient) GetCalibrationParameters(ctx context.Context, in *Robot, opts ...grpc.CallOption) (SwitchServer_GetCalibrationParametersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SwitchServer_serviceDesc.Streams[0], "/SwitchServer/GetCalibrationParameters", opts...)
	if err != nil {
		return nil, err
	}
	x := &switchServerGetCalibrationParametersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SwitchServer_GetCalibrationParametersClient interface {
	Recv() (*CalibrationParameter, error)
	grpc.ClientStream
}

type switchServerGetCalibrationParametersClient struct {
	grpc.ClientStream
}

func (x *switchServerGetCalibrationParametersClient) Recv() (*CalibrationParameter, error) {
	m := new(CalibrationParameter)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *switchServerClient) SetCalibrationParameter(ctx context.Context, in *CalibrationParameter, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/SwitchServer/SetCalibrationParameter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *switchServerClient) ResetCalibrationParameter(ctx context.Context, in *CalibrationParameter, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/SwitchServer/ResetCalibrationParameter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwitchServerServer is the server API for SwitchServer service.
type SwitchServerServer interface {
	// registers the robot with this usecase
	SetUsecase(context.Context, *Robot) (*empty.Empty, error)
	GetStatus(context.Context, *Robot) (*Status, error)
	SetRobot(context.Context, *Action) (*empty.Empty, error)
	GetCalibrationParameters(*Robot, SwitchServer_GetCalibrationParametersServer) error
	SetCalibrationParameter(context.Context, *CalibrationParameter) (*empty.Empty, error)
	// resets a calibration parameter to its default value
	ResetCalibrationParameter(context.Context, *CalibrationParameter) (*empty.Empty, error)
}

func RegisterSwitchServerServer(s *grpc.Server, srv SwitchServerServer) {
	s.RegisterService(&_SwitchServer_serviceDesc, srv)
}

func _SwitchServer_SetUsecase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Robot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchServerServer).SetUsecase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SwitchServer/SetUsecase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchServerServer).SetUsecase(ctx, req.(*Robot))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwitchServer_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Robot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchServerServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SwitchServer/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchServerServer).GetStatus(ctx, req.(*Robot))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwitchServer_SetRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Action)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchServerServer).SetRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SwitchServer/SetRobot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchServerServer).SetRobot(ctx, req.(*Action))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwitchServer_GetCalibrationParameters_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Robot)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SwitchServerServer).GetCalibrationParameters(m, &switchServerGetCalibrationParametersServer{stream})
}

type SwitchServer_GetCalibrationParametersServer interface {
	Send(*CalibrationParameter) error
	grpc.ServerStream
}

type switchServerGetCalibrationParametersServer struct {
	grpc.ServerStream
}

func (x *switchServerGetCalibrationParametersServer) Send(m *CalibrationParameter) error {
	return x.ServerStream.SendMsg(m)
}

func _SwitchServer_SetCalibrationParameter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalibrationParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchServerServer).SetCalibrationParameter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SwitchServer/SetCalibrationParameter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchServerServer).SetCalibrationParameter(ctx, req.(*CalibrationParameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwitchServer_ResetCalibrationParameter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalibrationParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwitchServerServer).ResetCalibrationParameter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SwitchServer/ResetCalibrationParameter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwitchServerServer).ResetCalibrationParameter(ctx, req.(*CalibrationParameter))
	}
	return interceptor(ctx, in, info, handler)
}

var _SwitchServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SwitchServer",
	HandlerType: (*SwitchServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetUsecase",
			Handler:    _SwitchServer_SetUsecase_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _SwitchServer_GetStatus_Handler,
		},
		{
			MethodName: "SetRobot",
			Handler:    _SwitchServer_SetRobot_Handler,
		},
		{
			MethodName: "SetCalibrationParameter",
			Handler:    _SwitchServer_SetCalibrationParameter_Handler,
		},
		{
			MethodName: "ResetCalibrationParameter",
			Handler:    _SwitchServer_ResetCalibrationParameter_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCalibrationParameters",
			Handler:       _SwitchServer_GetCalibrationParameters_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "usecase-service/usecase-service.proto",
}

func init() {
	proto.RegisterFile("usecase-service/usecase-service.proto", fileDescriptor_usecase_service_38790134dca44328)
}

var fileDescriptor_usecase_service_38790134dca44328 = []byte{
	// 426 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x4d, 0xd3, 0xf5, 0xeb, 0xd2, 0x4e, 0xc8, 0x1a, 0x2c, 0x14, 0x69, 0x42, 0x96, 0x90, 0x78,
	0x99, 0x8b, 0x36, 0xc4, 0x1b, 0x0f, 0x6c, 0x42, 0x1b, 0x88, 0x07, 0x94, 0x08, 0xde, 0x9d, 0xf4,
	0x76, 0x58, 0x4a, 0xe3, 0xca, 0xb9, 0xe9, 0xb6, 0x3f, 0xc8, 0x4f, 0xe1, 0x77, 0x20, 0xdb, 0x0d,
	0x4d, 0xab, 0xa8, 0x4f, 0x7b, 0xf3, 0x3d, 0xc7, 0xe7, 0xf8, 0x1e, 0xeb, 0xc0, 0xdb, 0xaa, 0xc4,
	0x4c, 0x96, 0x78, 0x5e, 0xa2, 0x59, 0xab, 0x0c, 0x67, 0x7b, 0xb3, 0x58, 0x19, 0x4d, 0x7a, 0xfa,
	0xfa, 0x4e, 0xeb, 0xbb, 0x1c, 0x67, 0x6e, 0x4a, 0xab, 0xc5, 0x0c, 0x97, 0x2b, 0x7a, 0xf4, 0x24,
	0x3f, 0x85, 0x5e, 0xac, 0x53, 0x4d, 0xec, 0x18, 0x42, 0x35, 0x8f, 0x3a, 0x6f, 0x3a, 0xef, 0x46,
	0x71, 0xa8, 0xe6, 0xfc, 0x0c, 0xfa, 0x09, 0x49, 0xaa, 0x4a, 0x76, 0x02, 0xbd, 0xb5, 0xcc, 0x2b,
	0xdc, 0x90, 0x7e, 0xe0, 0x1f, 0xa0, 0xff, 0x39, 0x23, 0xa5, 0x8b, 0x7d, 0x25, 0x9b, 0xc2, 0xb0,
	0xc0, 0xfb, 0x5f, 0x4e, 0x12, 0x3a, 0xf4, 0xff, 0xcc, 0x17, 0x30, 0xfe, 0x5a, 0xd0, 0x0f, 0x69,
	0xe4, 0x12, 0x09, 0x0d, 0x7b, 0x0e, 0xdd, 0xa5, 0x2a, 0x9c, 0xb8, 0x1b, 0xdb, 0xa3, 0x43, 0xe4,
	0x83, 0x13, 0x5a, 0x44, 0x3e, 0xb0, 0x08, 0x06, 0x73, 0x5c, 0xc8, 0x2a, 0xa7, 0xa8, 0xeb, 0xd0,
	0x7a, 0xb4, 0x4c, 0x56, 0x19, 0x83, 0x05, 0x45, 0x47, 0x9e, 0xd9, 0x8c, 0xfc, 0x1a, 0x26, 0x57,
	0x5a, 0xe7, 0xdb, 0x87, 0x1a, 0x26, 0xf6, 0xb1, 0x61, 0xab, 0x49, 0xe8, 0x99, 0xda, 0xe4, 0x4f,
	0x07, 0x4e, 0xae, 0x65, 0xae, 0x52, 0x23, 0x6d, 0xd0, 0xad, 0xd9, 0x7e, 0x62, 0x06, 0x47, 0x85,
	0x5c, 0xd6, 0x69, 0xdd, 0xd9, 0x62, 0xf4, 0xb8, 0x42, 0xb7, 0xf2, 0x28, 0x76, 0x67, 0x76, 0x09,
	0x63, 0xd5, 0x48, 0xef, 0x96, 0x7e, 0x76, 0x31, 0x11, 0xcd, 0x2f, 0xb9, 0x0d, 0xe2, 0x9d, 0x4b,
	0xec, 0x23, 0x4c, 0xd2, 0x66, 0x94, 0xa8, 0xe7, 0x54, 0xc7, 0x62, 0x27, 0xe0, 0x6d, 0x10, 0xef,
	0x5e, 0xbb, 0x1a, 0xd9, 0xc4, 0x24, 0x55, 0x5e, 0x5e, 0xfc, 0x0d, 0x61, 0x9c, 0xdc, 0x2b, 0xca,
	0x7e, 0x27, 0x68, 0xd6, 0x68, 0x98, 0x00, 0x48, 0x90, 0x7e, 0xfa, 0xba, 0xb0, 0xbe, 0x70, 0x15,
	0x98, 0xbe, 0x14, 0xbe, 0x29, 0xa2, 0x6e, 0x8a, 0xf8, 0x62, 0x9b, 0xc2, 0x03, 0x76, 0x06, 0xa3,
	0x1b, 0xa4, 0x4d, 0x1f, 0xea, 0xeb, 0x03, 0xe1, 0x01, 0x1e, 0xb0, 0x73, 0x18, 0x26, 0x48, 0xbe,
	0x48, 0x03, 0xe1, 0x7b, 0x71, 0xc0, 0xee, 0x13, 0x44, 0x37, 0x48, 0x6d, 0x5f, 0xbb, 0x75, 0x7f,
	0x21, 0xda, 0x78, 0x1e, 0xbc, 0xef, 0xb0, 0x6f, 0x70, 0x9a, 0xb4, 0xcb, 0x59, 0xbb, 0xea, 0xc0,
	0x2a, 0xdf, 0xe1, 0x55, 0x8c, 0xe5, 0x13, 0xb9, 0xa5, 0x7d, 0x87, 0x5c, 0xfe, 0x0b, 0x00, 0x00,
	0xff, 0xff, 0x05, 0x3c, 0x6b, 0x5e, 0x9a, 0x03, 0x00, 0x00,
}
