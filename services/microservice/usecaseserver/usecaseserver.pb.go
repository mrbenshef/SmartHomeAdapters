// Code generated by protoc-gen-go. DO NOT EDIT.
// source: usecaseserver/usecaseserver.proto

package usecaseserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Usecase struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Usecase) Reset()         { *m = Usecase{} }
func (m *Usecase) String() string { return proto.CompactTextString(m) }
func (*Usecase) ProtoMessage()    {}
func (*Usecase) Descriptor() ([]byte, []int) {
	return fileDescriptor_usecaseserver_0197c3a8c6e21ea2, []int{0}
}
func (m *Usecase) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Usecase.Unmarshal(m, b)
}
func (m *Usecase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Usecase.Marshal(b, m, deterministic)
}
func (dst *Usecase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Usecase.Merge(dst, src)
}
func (m *Usecase) XXX_Size() int {
	return xxx_messageInfo_Usecase.Size(m)
}
func (m *Usecase) XXX_DiscardUnknown() {
	xxx_messageInfo_Usecase.DiscardUnknown(m)
}

var xxx_messageInfo_Usecase proto.InternalMessageInfo

func (m *Usecase) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Usecase) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Usecase) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Robot struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Robot) Reset()         { *m = Robot{} }
func (m *Robot) String() string { return proto.CompactTextString(m) }
func (*Robot) ProtoMessage()    {}
func (*Robot) Descriptor() ([]byte, []int) {
	return fileDescriptor_usecaseserver_0197c3a8c6e21ea2, []int{1}
}
func (m *Robot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Robot.Unmarshal(m, b)
}
func (m *Robot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Robot.Marshal(b, m, deterministic)
}
func (dst *Robot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Robot.Merge(dst, src)
}
func (m *Robot) XXX_Size() int {
	return xxx_messageInfo_Robot.Size(m)
}
func (m *Robot) XXX_DiscardUnknown() {
	xxx_messageInfo_Robot.DiscardUnknown(m)
}

var xxx_messageInfo_Robot proto.InternalMessageInfo

func (m *Robot) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type SetUsecaseRequest struct {
	Robot                *Robot   `protobuf:"bytes,1,opt,name=robot,proto3" json:"robot,omitempty"`
	Usecase              string   `protobuf:"bytes,2,opt,name=usecase,proto3" json:"usecase,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetUsecaseRequest) Reset()         { *m = SetUsecaseRequest{} }
func (m *SetUsecaseRequest) String() string { return proto.CompactTextString(m) }
func (*SetUsecaseRequest) ProtoMessage()    {}
func (*SetUsecaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_usecaseserver_0197c3a8c6e21ea2, []int{2}
}
func (m *SetUsecaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetUsecaseRequest.Unmarshal(m, b)
}
func (m *SetUsecaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetUsecaseRequest.Marshal(b, m, deterministic)
}
func (dst *SetUsecaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetUsecaseRequest.Merge(dst, src)
}
func (m *SetUsecaseRequest) XXX_Size() int {
	return xxx_messageInfo_SetUsecaseRequest.Size(m)
}
func (m *SetUsecaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetUsecaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetUsecaseRequest proto.InternalMessageInfo

func (m *SetUsecaseRequest) GetRobot() *Robot {
	if m != nil {
		return m.Robot
	}
	return nil
}

func (m *SetUsecaseRequest) GetUsecase() string {
	if m != nil {
		return m.Usecase
	}
	return ""
}

type GetStatusRequest struct {
	Robot                *Robot   `protobuf:"bytes,1,opt,name=robot,proto3" json:"robot,omitempty"`
	Usecase              string   `protobuf:"bytes,2,opt,name=usecase,proto3" json:"usecase,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStatusRequest) Reset()         { *m = GetStatusRequest{} }
func (m *GetStatusRequest) String() string { return proto.CompactTextString(m) }
func (*GetStatusRequest) ProtoMessage()    {}
func (*GetStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_usecaseserver_0197c3a8c6e21ea2, []int{3}
}
func (m *GetStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetStatusRequest.Unmarshal(m, b)
}
func (m *GetStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetStatusRequest.Marshal(b, m, deterministic)
}
func (dst *GetStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStatusRequest.Merge(dst, src)
}
func (m *GetStatusRequest) XXX_Size() int {
	return xxx_messageInfo_GetStatusRequest.Size(m)
}
func (m *GetStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetStatusRequest proto.InternalMessageInfo

func (m *GetStatusRequest) GetRobot() *Robot {
	if m != nil {
		return m.Robot
	}
	return nil
}

func (m *GetStatusRequest) GetUsecase() string {
	if m != nil {
		return m.Usecase
	}
	return ""
}

type Status struct {
	// Types that are valid to be assigned to Status:
	//	*Status_ToggleStatus
	//	*Status_RangeStatus
	Status               isStatus_Status `protobuf_oneof:"status"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_usecaseserver_0197c3a8c6e21ea2, []int{4}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (dst *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(dst, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

type isStatus_Status interface {
	isStatus_Status()
}

type Status_ToggleStatus struct {
	ToggleStatus *ToggleStatus `protobuf:"bytes,1,opt,name=toggleStatus,proto3,oneof"`
}

type Status_RangeStatus struct {
	RangeStatus *RangeStatus `protobuf:"bytes,2,opt,name=rangeStatus,proto3,oneof"`
}

func (*Status_ToggleStatus) isStatus_Status() {}

func (*Status_RangeStatus) isStatus_Status() {}

func (m *Status) GetStatus() isStatus_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Status) GetToggleStatus() *ToggleStatus {
	if x, ok := m.GetStatus().(*Status_ToggleStatus); ok {
		return x.ToggleStatus
	}
	return nil
}

func (m *Status) GetRangeStatus() *RangeStatus {
	if x, ok := m.GetStatus().(*Status_RangeStatus); ok {
		return x.RangeStatus
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Status) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Status_OneofMarshaler, _Status_OneofUnmarshaler, _Status_OneofSizer, []interface{}{
		(*Status_ToggleStatus)(nil),
		(*Status_RangeStatus)(nil),
	}
}

func _Status_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Status)
	// status
	switch x := m.Status.(type) {
	case *Status_ToggleStatus:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ToggleStatus); err != nil {
			return err
		}
	case *Status_RangeStatus:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RangeStatus); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Status.Status has unexpected type %T", x)
	}
	return nil
}

func _Status_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Status)
	switch tag {
	case 1: // status.toggleStatus
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ToggleStatus)
		err := b.DecodeMessage(msg)
		m.Status = &Status_ToggleStatus{msg}
		return true, err
	case 2: // status.rangeStatus
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RangeStatus)
		err := b.DecodeMessage(msg)
		m.Status = &Status_RangeStatus{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Status_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Status)
	// status
	switch x := m.Status.(type) {
	case *Status_ToggleStatus:
		s := proto.Size(x.ToggleStatus)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Status_RangeStatus:
		s := proto.Size(x.RangeStatus)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ToggleStatus struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ToggleStatus) Reset()         { *m = ToggleStatus{} }
func (m *ToggleStatus) String() string { return proto.CompactTextString(m) }
func (*ToggleStatus) ProtoMessage()    {}
func (*ToggleStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_usecaseserver_0197c3a8c6e21ea2, []int{5}
}
func (m *ToggleStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ToggleStatus.Unmarshal(m, b)
}
func (m *ToggleStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ToggleStatus.Marshal(b, m, deterministic)
}
func (dst *ToggleStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToggleStatus.Merge(dst, src)
}
func (m *ToggleStatus) XXX_Size() int {
	return xxx_messageInfo_ToggleStatus.Size(m)
}
func (m *ToggleStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ToggleStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ToggleStatus proto.InternalMessageInfo

func (m *ToggleStatus) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type RangeStatus struct {
	Min                  int64    `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max                  int64    `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	Value                int64    `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RangeStatus) Reset()         { *m = RangeStatus{} }
func (m *RangeStatus) String() string { return proto.CompactTextString(m) }
func (*RangeStatus) ProtoMessage()    {}
func (*RangeStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_usecaseserver_0197c3a8c6e21ea2, []int{6}
}
func (m *RangeStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RangeStatus.Unmarshal(m, b)
}
func (m *RangeStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RangeStatus.Marshal(b, m, deterministic)
}
func (dst *RangeStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangeStatus.Merge(dst, src)
}
func (m *RangeStatus) XXX_Size() int {
	return xxx_messageInfo_RangeStatus.Size(m)
}
func (m *RangeStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_RangeStatus.DiscardUnknown(m)
}

var xxx_messageInfo_RangeStatus proto.InternalMessageInfo

func (m *RangeStatus) GetMin() int64 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *RangeStatus) GetMax() int64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *RangeStatus) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type ToggleRequest struct {
	Robot                *Robot   `protobuf:"bytes,1,opt,name=robot,proto3" json:"robot,omitempty"`
	Usecase              string   `protobuf:"bytes,3,opt,name=usecase,proto3" json:"usecase,omitempty"`
	NewValue             bool     `protobuf:"varint,2,opt,name=newValue,proto3" json:"newValue,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ToggleRequest) Reset()         { *m = ToggleRequest{} }
func (m *ToggleRequest) String() string { return proto.CompactTextString(m) }
func (*ToggleRequest) ProtoMessage()    {}
func (*ToggleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_usecaseserver_0197c3a8c6e21ea2, []int{7}
}
func (m *ToggleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ToggleRequest.Unmarshal(m, b)
}
func (m *ToggleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ToggleRequest.Marshal(b, m, deterministic)
}
func (dst *ToggleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToggleRequest.Merge(dst, src)
}
func (m *ToggleRequest) XXX_Size() int {
	return xxx_messageInfo_ToggleRequest.Size(m)
}
func (m *ToggleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ToggleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ToggleRequest proto.InternalMessageInfo

func (m *ToggleRequest) GetRobot() *Robot {
	if m != nil {
		return m.Robot
	}
	return nil
}

func (m *ToggleRequest) GetUsecase() string {
	if m != nil {
		return m.Usecase
	}
	return ""
}

func (m *ToggleRequest) GetNewValue() bool {
	if m != nil {
		return m.NewValue
	}
	return false
}

type RangeRequest struct {
	Robot                *Robot   `protobuf:"bytes,1,opt,name=robot,proto3" json:"robot,omitempty"`
	Usecase              string   `protobuf:"bytes,3,opt,name=usecase,proto3" json:"usecase,omitempty"`
	NewValue             int64    `protobuf:"varint,2,opt,name=newValue,proto3" json:"newValue,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RangeRequest) Reset()         { *m = RangeRequest{} }
func (m *RangeRequest) String() string { return proto.CompactTextString(m) }
func (*RangeRequest) ProtoMessage()    {}
func (*RangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_usecaseserver_0197c3a8c6e21ea2, []int{8}
}
func (m *RangeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RangeRequest.Unmarshal(m, b)
}
func (m *RangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RangeRequest.Marshal(b, m, deterministic)
}
func (dst *RangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangeRequest.Merge(dst, src)
}
func (m *RangeRequest) XXX_Size() int {
	return xxx_messageInfo_RangeRequest.Size(m)
}
func (m *RangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RangeRequest proto.InternalMessageInfo

func (m *RangeRequest) GetRobot() *Robot {
	if m != nil {
		return m.Robot
	}
	return nil
}

func (m *RangeRequest) GetUsecase() string {
	if m != nil {
		return m.Usecase
	}
	return ""
}

func (m *RangeRequest) GetNewValue() int64 {
	if m != nil {
		return m.NewValue
	}
	return 0
}

type IntParameter struct {
	Min                  int64    `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max                  int64    `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	Default              int64    `protobuf:"varint,3,opt,name=default,proto3" json:"default,omitempty"`
	Current              int64    `protobuf:"varint,4,opt,name=current,proto3" json:"current,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IntParameter) Reset()         { *m = IntParameter{} }
func (m *IntParameter) String() string { return proto.CompactTextString(m) }
func (*IntParameter) ProtoMessage()    {}
func (*IntParameter) Descriptor() ([]byte, []int) {
	return fileDescriptor_usecaseserver_0197c3a8c6e21ea2, []int{9}
}
func (m *IntParameter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IntParameter.Unmarshal(m, b)
}
func (m *IntParameter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IntParameter.Marshal(b, m, deterministic)
}
func (dst *IntParameter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntParameter.Merge(dst, src)
}
func (m *IntParameter) XXX_Size() int {
	return xxx_messageInfo_IntParameter.Size(m)
}
func (m *IntParameter) XXX_DiscardUnknown() {
	xxx_messageInfo_IntParameter.DiscardUnknown(m)
}

var xxx_messageInfo_IntParameter proto.InternalMessageInfo

func (m *IntParameter) GetMin() int64 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *IntParameter) GetMax() int64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *IntParameter) GetDefault() int64 {
	if m != nil {
		return m.Default
	}
	return 0
}

func (m *IntParameter) GetCurrent() int64 {
	if m != nil {
		return m.Current
	}
	return 0
}

type BoolParameter struct {
	Default              bool     `protobuf:"varint,1,opt,name=default,proto3" json:"default,omitempty"`
	Current              bool     `protobuf:"varint,2,opt,name=current,proto3" json:"current,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BoolParameter) Reset()         { *m = BoolParameter{} }
func (m *BoolParameter) String() string { return proto.CompactTextString(m) }
func (*BoolParameter) ProtoMessage()    {}
func (*BoolParameter) Descriptor() ([]byte, []int) {
	return fileDescriptor_usecaseserver_0197c3a8c6e21ea2, []int{10}
}
func (m *BoolParameter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BoolParameter.Unmarshal(m, b)
}
func (m *BoolParameter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BoolParameter.Marshal(b, m, deterministic)
}
func (dst *BoolParameter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoolParameter.Merge(dst, src)
}
func (m *BoolParameter) XXX_Size() int {
	return xxx_messageInfo_BoolParameter.Size(m)
}
func (m *BoolParameter) XXX_DiscardUnknown() {
	xxx_messageInfo_BoolParameter.DiscardUnknown(m)
}

var xxx_messageInfo_BoolParameter proto.InternalMessageInfo

func (m *BoolParameter) GetDefault() bool {
	if m != nil {
		return m.Default
	}
	return false
}

func (m *BoolParameter) GetCurrent() bool {
	if m != nil {
		return m.Current
	}
	return false
}

type CalibrationParameter struct {
	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Type        string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Types that are valid to be assigned to Details:
	//	*CalibrationParameter_IntParameter
	//	*CalibrationParameter_BoolParameter
	Details              isCalibrationParameter_Details `protobuf_oneof:"details"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *CalibrationParameter) Reset()         { *m = CalibrationParameter{} }
func (m *CalibrationParameter) String() string { return proto.CompactTextString(m) }
func (*CalibrationParameter) ProtoMessage()    {}
func (*CalibrationParameter) Descriptor() ([]byte, []int) {
	return fileDescriptor_usecaseserver_0197c3a8c6e21ea2, []int{11}
}
func (m *CalibrationParameter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalibrationParameter.Unmarshal(m, b)
}
func (m *CalibrationParameter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalibrationParameter.Marshal(b, m, deterministic)
}
func (dst *CalibrationParameter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalibrationParameter.Merge(dst, src)
}
func (m *CalibrationParameter) XXX_Size() int {
	return xxx_messageInfo_CalibrationParameter.Size(m)
}
func (m *CalibrationParameter) XXX_DiscardUnknown() {
	xxx_messageInfo_CalibrationParameter.DiscardUnknown(m)
}

var xxx_messageInfo_CalibrationParameter proto.InternalMessageInfo

func (m *CalibrationParameter) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CalibrationParameter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CalibrationParameter) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CalibrationParameter) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type isCalibrationParameter_Details interface {
	isCalibrationParameter_Details()
}

type CalibrationParameter_IntParameter struct {
	IntParameter *IntParameter `protobuf:"bytes,4,opt,name=intParameter,proto3,oneof"`
}

type CalibrationParameter_BoolParameter struct {
	BoolParameter *BoolParameter `protobuf:"bytes,5,opt,name=boolParameter,proto3,oneof"`
}

func (*CalibrationParameter_IntParameter) isCalibrationParameter_Details() {}

func (*CalibrationParameter_BoolParameter) isCalibrationParameter_Details() {}

func (m *CalibrationParameter) GetDetails() isCalibrationParameter_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *CalibrationParameter) GetIntParameter() *IntParameter {
	if x, ok := m.GetDetails().(*CalibrationParameter_IntParameter); ok {
		return x.IntParameter
	}
	return nil
}

func (m *CalibrationParameter) GetBoolParameter() *BoolParameter {
	if x, ok := m.GetDetails().(*CalibrationParameter_BoolParameter); ok {
		return x.BoolParameter
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CalibrationParameter) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CalibrationParameter_OneofMarshaler, _CalibrationParameter_OneofUnmarshaler, _CalibrationParameter_OneofSizer, []interface{}{
		(*CalibrationParameter_IntParameter)(nil),
		(*CalibrationParameter_BoolParameter)(nil),
	}
}

func _CalibrationParameter_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CalibrationParameter)
	// details
	switch x := m.Details.(type) {
	case *CalibrationParameter_IntParameter:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IntParameter); err != nil {
			return err
		}
	case *CalibrationParameter_BoolParameter:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BoolParameter); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CalibrationParameter.Details has unexpected type %T", x)
	}
	return nil
}

func _CalibrationParameter_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CalibrationParameter)
	switch tag {
	case 4: // details.intParameter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(IntParameter)
		err := b.DecodeMessage(msg)
		m.Details = &CalibrationParameter_IntParameter{msg}
		return true, err
	case 5: // details.boolParameter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BoolParameter)
		err := b.DecodeMessage(msg)
		m.Details = &CalibrationParameter_BoolParameter{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CalibrationParameter_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CalibrationParameter)
	// details
	switch x := m.Details.(type) {
	case *CalibrationParameter_IntParameter:
		s := proto.Size(x.IntParameter)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CalibrationParameter_BoolParameter:
		s := proto.Size(x.BoolParameter)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GetCalibrationParametersRequest struct {
	Robot                *Robot   `protobuf:"bytes,1,opt,name=robot,proto3" json:"robot,omitempty"`
	Usecase              string   `protobuf:"bytes,2,opt,name=usecase,proto3" json:"usecase,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCalibrationParametersRequest) Reset()         { *m = GetCalibrationParametersRequest{} }
func (m *GetCalibrationParametersRequest) String() string { return proto.CompactTextString(m) }
func (*GetCalibrationParametersRequest) ProtoMessage()    {}
func (*GetCalibrationParametersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_usecaseserver_0197c3a8c6e21ea2, []int{12}
}
func (m *GetCalibrationParametersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCalibrationParametersRequest.Unmarshal(m, b)
}
func (m *GetCalibrationParametersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCalibrationParametersRequest.Marshal(b, m, deterministic)
}
func (dst *GetCalibrationParametersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCalibrationParametersRequest.Merge(dst, src)
}
func (m *GetCalibrationParametersRequest) XXX_Size() int {
	return xxx_messageInfo_GetCalibrationParametersRequest.Size(m)
}
func (m *GetCalibrationParametersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCalibrationParametersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCalibrationParametersRequest proto.InternalMessageInfo

func (m *GetCalibrationParametersRequest) GetRobot() *Robot {
	if m != nil {
		return m.Robot
	}
	return nil
}

func (m *GetCalibrationParametersRequest) GetUsecase() string {
	if m != nil {
		return m.Usecase
	}
	return ""
}

type SetCalibrationParameterRequest struct {
	Robot   *Robot `protobuf:"bytes,1,opt,name=robot,proto3" json:"robot,omitempty"`
	Usecase string `protobuf:"bytes,3,opt,name=usecase,proto3" json:"usecase,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are valid to be assigned to Details:
	//	*SetCalibrationParameterRequest_IntValue
	//	*SetCalibrationParameterRequest_BoolValue
	Details              isSetCalibrationParameterRequest_Details `protobuf_oneof:"details"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *SetCalibrationParameterRequest) Reset()         { *m = SetCalibrationParameterRequest{} }
func (m *SetCalibrationParameterRequest) String() string { return proto.CompactTextString(m) }
func (*SetCalibrationParameterRequest) ProtoMessage()    {}
func (*SetCalibrationParameterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_usecaseserver_0197c3a8c6e21ea2, []int{13}
}
func (m *SetCalibrationParameterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetCalibrationParameterRequest.Unmarshal(m, b)
}
func (m *SetCalibrationParameterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetCalibrationParameterRequest.Marshal(b, m, deterministic)
}
func (dst *SetCalibrationParameterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetCalibrationParameterRequest.Merge(dst, src)
}
func (m *SetCalibrationParameterRequest) XXX_Size() int {
	return xxx_messageInfo_SetCalibrationParameterRequest.Size(m)
}
func (m *SetCalibrationParameterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetCalibrationParameterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetCalibrationParameterRequest proto.InternalMessageInfo

func (m *SetCalibrationParameterRequest) GetRobot() *Robot {
	if m != nil {
		return m.Robot
	}
	return nil
}

func (m *SetCalibrationParameterRequest) GetUsecase() string {
	if m != nil {
		return m.Usecase
	}
	return ""
}

func (m *SetCalibrationParameterRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type isSetCalibrationParameterRequest_Details interface {
	isSetCalibrationParameterRequest_Details()
}

type SetCalibrationParameterRequest_IntValue struct {
	IntValue int64 `protobuf:"varint,4,opt,name=intValue,proto3,oneof"`
}

type SetCalibrationParameterRequest_BoolValue struct {
	BoolValue bool `protobuf:"varint,5,opt,name=boolValue,proto3,oneof"`
}

func (*SetCalibrationParameterRequest_IntValue) isSetCalibrationParameterRequest_Details() {}

func (*SetCalibrationParameterRequest_BoolValue) isSetCalibrationParameterRequest_Details() {}

func (m *SetCalibrationParameterRequest) GetDetails() isSetCalibrationParameterRequest_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *SetCalibrationParameterRequest) GetIntValue() int64 {
	if x, ok := m.GetDetails().(*SetCalibrationParameterRequest_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (m *SetCalibrationParameterRequest) GetBoolValue() bool {
	if x, ok := m.GetDetails().(*SetCalibrationParameterRequest_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SetCalibrationParameterRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SetCalibrationParameterRequest_OneofMarshaler, _SetCalibrationParameterRequest_OneofUnmarshaler, _SetCalibrationParameterRequest_OneofSizer, []interface{}{
		(*SetCalibrationParameterRequest_IntValue)(nil),
		(*SetCalibrationParameterRequest_BoolValue)(nil),
	}
}

func _SetCalibrationParameterRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SetCalibrationParameterRequest)
	// details
	switch x := m.Details.(type) {
	case *SetCalibrationParameterRequest_IntValue:
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.IntValue))
	case *SetCalibrationParameterRequest_BoolValue:
		t := uint64(0)
		if x.BoolValue {
			t = 1
		}
		b.EncodeVarint(5<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("SetCalibrationParameterRequest.Details has unexpected type %T", x)
	}
	return nil
}

func _SetCalibrationParameterRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SetCalibrationParameterRequest)
	switch tag {
	case 4: // details.intValue
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Details = &SetCalibrationParameterRequest_IntValue{int64(x)}
		return true, err
	case 5: // details.boolValue
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Details = &SetCalibrationParameterRequest_BoolValue{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _SetCalibrationParameterRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SetCalibrationParameterRequest)
	// details
	switch x := m.Details.(type) {
	case *SetCalibrationParameterRequest_IntValue:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.IntValue))
	case *SetCalibrationParameterRequest_BoolValue:
		n += 1 // tag and wire
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ResetCalibrationParameterRequest struct {
	Robot                *Robot   `protobuf:"bytes,1,opt,name=robot,proto3" json:"robot,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResetCalibrationParameterRequest) Reset()         { *m = ResetCalibrationParameterRequest{} }
func (m *ResetCalibrationParameterRequest) String() string { return proto.CompactTextString(m) }
func (*ResetCalibrationParameterRequest) ProtoMessage()    {}
func (*ResetCalibrationParameterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_usecaseserver_0197c3a8c6e21ea2, []int{14}
}
func (m *ResetCalibrationParameterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResetCalibrationParameterRequest.Unmarshal(m, b)
}
func (m *ResetCalibrationParameterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResetCalibrationParameterRequest.Marshal(b, m, deterministic)
}
func (dst *ResetCalibrationParameterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetCalibrationParameterRequest.Merge(dst, src)
}
func (m *ResetCalibrationParameterRequest) XXX_Size() int {
	return xxx_messageInfo_ResetCalibrationParameterRequest.Size(m)
}
func (m *ResetCalibrationParameterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetCalibrationParameterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResetCalibrationParameterRequest proto.InternalMessageInfo

func (m *ResetCalibrationParameterRequest) GetRobot() *Robot {
	if m != nil {
		return m.Robot
	}
	return nil
}

func (m *ResetCalibrationParameterRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*Usecase)(nil), "Usecase")
	proto.RegisterType((*Robot)(nil), "Robot")
	proto.RegisterType((*SetUsecaseRequest)(nil), "SetUsecaseRequest")
	proto.RegisterType((*GetStatusRequest)(nil), "GetStatusRequest")
	proto.RegisterType((*Status)(nil), "Status")
	proto.RegisterType((*ToggleStatus)(nil), "ToggleStatus")
	proto.RegisterType((*RangeStatus)(nil), "RangeStatus")
	proto.RegisterType((*ToggleRequest)(nil), "ToggleRequest")
	proto.RegisterType((*RangeRequest)(nil), "RangeRequest")
	proto.RegisterType((*IntParameter)(nil), "IntParameter")
	proto.RegisterType((*BoolParameter)(nil), "BoolParameter")
	proto.RegisterType((*CalibrationParameter)(nil), "CalibrationParameter")
	proto.RegisterType((*GetCalibrationParametersRequest)(nil), "GetCalibrationParametersRequest")
	proto.RegisterType((*SetCalibrationParameterRequest)(nil), "SetCalibrationParameterRequest")
	proto.RegisterType((*ResetCalibrationParameterRequest)(nil), "ResetCalibrationParameterRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UsecaseServerClient is the client API for UsecaseServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UsecaseServerClient interface {
	GetUsecases(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (UsecaseServer_GetUsecasesClient, error)
	// registers the robot with this usecase
	SetUsecase(ctx context.Context, in *SetUsecaseRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*Status, error)
	Toggle(ctx context.Context, in *ToggleRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Range(ctx context.Context, in *RangeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetCalibrationParameters(ctx context.Context, in *GetCalibrationParametersRequest, opts ...grpc.CallOption) (UsecaseServer_GetCalibrationParametersClient, error)
	SetCalibrationParameter(ctx context.Context, in *SetCalibrationParameterRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type usecaseServerClient struct {
	cc *grpc.ClientConn
}

func NewUsecaseServerClient(cc *grpc.ClientConn) UsecaseServerClient {
	return &usecaseServerClient{cc}
}

func (c *usecaseServerClient) GetUsecases(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (UsecaseServer_GetUsecasesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UsecaseServer_serviceDesc.Streams[0], "/UsecaseServer/GetUsecases", opts...)
	if err != nil {
		return nil, err
	}
	x := &usecaseServerGetUsecasesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UsecaseServer_GetUsecasesClient interface {
	Recv() (*Usecase, error)
	grpc.ClientStream
}

type usecaseServerGetUsecasesClient struct {
	grpc.ClientStream
}

func (x *usecaseServerGetUsecasesClient) Recv() (*Usecase, error) {
	m := new(Usecase)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *usecaseServerClient) SetUsecase(ctx context.Context, in *SetUsecaseRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/UsecaseServer/SetUsecase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usecaseServerClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/UsecaseServer/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usecaseServerClient) Toggle(ctx context.Context, in *ToggleRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/UsecaseServer/Toggle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usecaseServerClient) Range(ctx context.Context, in *RangeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/UsecaseServer/Range", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usecaseServerClient) GetCalibrationParameters(ctx context.Context, in *GetCalibrationParametersRequest, opts ...grpc.CallOption) (UsecaseServer_GetCalibrationParametersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_UsecaseServer_serviceDesc.Streams[1], "/UsecaseServer/GetCalibrationParameters", opts...)
	if err != nil {
		return nil, err
	}
	x := &usecaseServerGetCalibrationParametersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UsecaseServer_GetCalibrationParametersClient interface {
	Recv() (*CalibrationParameter, error)
	grpc.ClientStream
}

type usecaseServerGetCalibrationParametersClient struct {
	grpc.ClientStream
}

func (x *usecaseServerGetCalibrationParametersClient) Recv() (*CalibrationParameter, error) {
	m := new(CalibrationParameter)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *usecaseServerClient) SetCalibrationParameter(ctx context.Context, in *SetCalibrationParameterRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/UsecaseServer/SetCalibrationParameter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsecaseServerServer is the server API for UsecaseServer service.
type UsecaseServerServer interface {
	GetUsecases(*empty.Empty, UsecaseServer_GetUsecasesServer) error
	// registers the robot with this usecase
	SetUsecase(context.Context, *SetUsecaseRequest) (*empty.Empty, error)
	GetStatus(context.Context, *GetStatusRequest) (*Status, error)
	Toggle(context.Context, *ToggleRequest) (*empty.Empty, error)
	Range(context.Context, *RangeRequest) (*empty.Empty, error)
	GetCalibrationParameters(*GetCalibrationParametersRequest, UsecaseServer_GetCalibrationParametersServer) error
	SetCalibrationParameter(context.Context, *SetCalibrationParameterRequest) (*empty.Empty, error)
}

func RegisterUsecaseServerServer(s *grpc.Server, srv UsecaseServerServer) {
	s.RegisterService(&_UsecaseServer_serviceDesc, srv)
}

func _UsecaseServer_GetUsecases_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UsecaseServerServer).GetUsecases(m, &usecaseServerGetUsecasesServer{stream})
}

type UsecaseServer_GetUsecasesServer interface {
	Send(*Usecase) error
	grpc.ServerStream
}

type usecaseServerGetUsecasesServer struct {
	grpc.ServerStream
}

func (x *usecaseServerGetUsecasesServer) Send(m *Usecase) error {
	return x.ServerStream.SendMsg(m)
}

func _UsecaseServer_SetUsecase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUsecaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsecaseServerServer).SetUsecase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsecaseServer/SetUsecase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsecaseServerServer).SetUsecase(ctx, req.(*SetUsecaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsecaseServer_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsecaseServerServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsecaseServer/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsecaseServerServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsecaseServer_Toggle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsecaseServerServer).Toggle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsecaseServer/Toggle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsecaseServerServer).Toggle(ctx, req.(*ToggleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsecaseServer_Range_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsecaseServerServer).Range(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsecaseServer/Range",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsecaseServerServer).Range(ctx, req.(*RangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsecaseServer_GetCalibrationParameters_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCalibrationParametersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UsecaseServerServer).GetCalibrationParameters(m, &usecaseServerGetCalibrationParametersServer{stream})
}

type UsecaseServer_GetCalibrationParametersServer interface {
	Send(*CalibrationParameter) error
	grpc.ServerStream
}

type usecaseServerGetCalibrationParametersServer struct {
	grpc.ServerStream
}

func (x *usecaseServerGetCalibrationParametersServer) Send(m *CalibrationParameter) error {
	return x.ServerStream.SendMsg(m)
}

func _UsecaseServer_SetCalibrationParameter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCalibrationParameterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsecaseServerServer).SetCalibrationParameter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsecaseServer/SetCalibrationParameter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsecaseServerServer).SetCalibrationParameter(ctx, req.(*SetCalibrationParameterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UsecaseServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "UsecaseServer",
	HandlerType: (*UsecaseServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetUsecase",
			Handler:    _UsecaseServer_SetUsecase_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _UsecaseServer_GetStatus_Handler,
		},
		{
			MethodName: "Toggle",
			Handler:    _UsecaseServer_Toggle_Handler,
		},
		{
			MethodName: "Range",
			Handler:    _UsecaseServer_Range_Handler,
		},
		{
			MethodName: "SetCalibrationParameter",
			Handler:    _UsecaseServer_SetCalibrationParameter_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUsecases",
			Handler:       _UsecaseServer_GetUsecases_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetCalibrationParameters",
			Handler:       _UsecaseServer_GetCalibrationParameters_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "usecaseserver/usecaseserver.proto",
}

func init() {
	proto.RegisterFile("usecaseserver/usecaseserver.proto", fileDescriptor_usecaseserver_0197c3a8c6e21ea2)
}

var fileDescriptor_usecaseserver_0197c3a8c6e21ea2 = []byte{
	// 656 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0x76, 0xe2, 0xe6, 0x6b, 0x92, 0x54, 0xed, 0xa8, 0xef, 0x5b, 0x2b, 0x54, 0x6d, 0xb0, 0x38,
	0xc0, 0x65, 0x5b, 0xb5, 0x12, 0x07, 0x8e, 0xad, 0x50, 0x02, 0x1c, 0xa8, 0x36, 0x05, 0xc4, 0x71,
	0x93, 0x6c, 0x23, 0x4b, 0x8e, 0x1d, 0xec, 0x75, 0x69, 0x7f, 0x16, 0xff, 0x80, 0x9f, 0xc3, 0xcf,
	0x40, 0x3b, 0xeb, 0x24, 0xeb, 0x36, 0x29, 0x1f, 0xe1, 0xb6, 0xf3, 0xf5, 0xcc, 0xec, 0xb3, 0xb3,
	0x0f, 0x3c, 0xcd, 0x52, 0x39, 0x12, 0xa9, 0x4c, 0x65, 0x72, 0x23, 0x93, 0xe3, 0x82, 0xc5, 0x66,
	0x49, 0xac, 0xe2, 0xce, 0x93, 0x49, 0x1c, 0x4f, 0x42, 0x79, 0x4c, 0xd6, 0x30, 0xbb, 0x3e, 0x96,
	0xd3, 0x99, 0xba, 0x33, 0x41, 0xff, 0x3d, 0xd4, 0x3e, 0x98, 0x1a, 0xdc, 0x86, 0x72, 0x30, 0xf6,
	0x4a, 0xdd, 0xd2, 0xf3, 0x06, 0x2f, 0x07, 0x63, 0x44, 0xd8, 0x8a, 0xc4, 0x54, 0x7a, 0x65, 0xf2,
	0xd0, 0x19, 0xbb, 0xd0, 0x1c, 0xcb, 0x74, 0x94, 0x04, 0x33, 0x15, 0xc4, 0x91, 0xe7, 0x52, 0xc8,
	0x76, 0xf9, 0xfb, 0x50, 0xe1, 0xf1, 0x30, 0x56, 0xf7, 0xe1, 0xfc, 0x77, 0xb0, 0x3b, 0x90, 0x2a,
	0x6f, 0xc6, 0xe5, 0x97, 0x4c, 0xa6, 0x0a, 0x0f, 0xa0, 0x92, 0xe8, 0x6c, 0xca, 0x6b, 0x9e, 0x56,
	0x19, 0xd5, 0x72, 0xe3, 0x44, 0x0f, 0x6a, 0xf9, 0x85, 0xf2, 0x21, 0xe6, 0xa6, 0xff, 0x16, 0x76,
	0x7a, 0x52, 0x0d, 0x94, 0x50, 0x59, 0xba, 0x29, 0xd6, 0x1d, 0x54, 0x0d, 0x10, 0x9e, 0x41, 0x4b,
	0xc5, 0x93, 0x49, 0x28, 0x8d, 0x9d, 0x03, 0xb5, 0xd9, 0x95, 0xe5, 0xec, 0x3b, 0xbc, 0x90, 0x84,
	0x27, 0xd0, 0x4c, 0x44, 0x34, 0x99, 0xd7, 0x94, 0xa9, 0xa6, 0xc5, 0xf8, 0xd2, 0xd7, 0x77, 0xb8,
	0x9d, 0x72, 0x5e, 0x87, 0x6a, 0x4a, 0x27, 0xff, 0x19, 0xb4, 0x6c, 0x6c, 0xdc, 0x83, 0xca, 0x8d,
	0x08, 0x33, 0x49, 0x9d, 0xeb, 0xdc, 0x18, 0x7e, 0x0f, 0x9a, 0x16, 0x1a, 0xee, 0x80, 0x3b, 0x0d,
	0x22, 0x4a, 0x71, 0xb9, 0x3e, 0x92, 0x47, 0xdc, 0x52, 0x6b, 0xed, 0x11, 0xb7, 0x4b, 0x20, 0x97,
	0x7c, 0x39, 0xd0, 0x08, 0xda, 0xa6, 0xdd, 0x1f, 0x53, 0xe6, 0x16, 0x28, 0xc3, 0x0e, 0xd4, 0x23,
	0xf9, 0xf5, 0x23, 0x75, 0x28, 0xd3, 0xa8, 0x0b, 0xdb, 0x1f, 0x42, 0x8b, 0xa6, 0xfd, 0xd7, 0x3d,
	0x5c, 0xab, 0xc7, 0x35, 0xb4, 0xde, 0x44, 0xea, 0x52, 0x24, 0x62, 0x2a, 0x95, 0x4c, 0x7e, 0x8b,
	0x12, 0x0f, 0x6a, 0x63, 0x79, 0x2d, 0xb2, 0x50, 0xe5, 0xa4, 0xcc, 0x4d, 0x1d, 0x19, 0x65, 0x49,
	0x22, 0x23, 0xe5, 0x6d, 0x99, 0x48, 0x6e, 0xfa, 0x17, 0xd0, 0x3e, 0x8f, 0xe3, 0x70, 0xd9, 0xc8,
	0x02, 0x31, 0x4f, 0xb4, 0x0a, 0xc4, 0x30, 0xb2, 0x00, 0xf9, 0x51, 0x82, 0xbd, 0x0b, 0x11, 0x06,
	0xc3, 0x44, 0xe8, 0x1f, 0xb2, 0x04, 0xfb, 0x8b, 0x0f, 0x57, 0x7d, 0xf0, 0xe1, 0x74, 0x95, 0xba,
	0x9b, 0xcd, 0xe9, 0xa3, 0xb3, 0x5e, 0xe4, 0xc0, 0xe2, 0x87, 0xae, 0xa5, 0x17, 0xd9, 0x26, 0x4d,
	0x2f, 0xb2, 0x9d, 0x84, 0x2f, 0xa1, 0x3d, 0xb4, 0x2f, 0xeb, 0x55, 0xa8, 0x6a, 0x9b, 0x15, 0x28,
	0xe8, 0x3b, 0xbc, 0x98, 0x76, 0xde, 0xd0, 0x9c, 0x28, 0x11, 0x84, 0xa9, 0xff, 0x19, 0x8e, 0x7a,
	0x52, 0xad, 0xba, 0xec, 0xc6, 0xbf, 0xf4, 0x5b, 0x09, 0x0e, 0x07, 0xab, 0xb1, 0x37, 0xdd, 0x34,
	0xf3, 0x0e, 0xe5, 0xc5, 0x3b, 0x1c, 0x40, 0x3d, 0x88, 0x94, 0xd9, 0x3c, 0x5a, 0x88, 0xbe, 0xc3,
	0x17, 0x1e, 0x3c, 0x84, 0x86, 0xbe, 0xbf, 0x09, 0x6b, 0x8a, 0xea, 0x7d, 0x87, 0x2f, 0x5d, 0x36,
	0x1d, 0x97, 0xd0, 0xe5, 0x32, 0xdd, 0x64, 0xe8, 0x7b, 0xa3, 0x9d, 0x7e, 0x77, 0xa1, 0x9d, 0x4b,
	0xe8, 0x80, 0x34, 0x1e, 0xcf, 0xa0, 0xd9, 0x5b, 0xc8, 0x6a, 0x8a, 0xff, 0x33, 0xa3, 0xf6, 0x6c,
	0xae, 0xf6, 0xec, 0xb5, 0x56, 0xfb, 0x4e, 0x9d, 0xe5, 0x29, 0xbe, 0x73, 0x52, 0xc2, 0x57, 0x00,
	0x4b, 0x2d, 0x46, 0x64, 0x0f, 0x84, 0xb9, 0xb3, 0x06, 0xc7, 0x77, 0xf0, 0x05, 0x34, 0x16, 0xd2,
	0x8b, 0xbb, 0xec, 0xbe, 0x0c, 0x77, 0x6a, 0xcc, 0xd8, 0xbe, 0x83, 0xa7, 0x50, 0x35, 0x7a, 0x83,
	0xdb, 0xac, 0x20, 0x3c, 0x8f, 0xc0, 0x9f, 0x40, 0x85, 0xe4, 0x03, 0xdb, 0xcc, 0x96, 0x91, 0x47,
	0x2a, 0x3e, 0x81, 0xb7, 0x6e, 0xe9, 0xb0, 0xcb, 0x7e, 0xb1, 0x8f, 0x9d, 0xff, 0xd8, 0xaa, 0x30,
	0xb1, 0x74, 0x05, 0xfb, 0x6b, 0x36, 0x0e, 0x8f, 0xd8, 0xe3, 0xbb, 0xb8, 0x7e, 0xdc, 0x61, 0x95,
	0x3c, 0x67, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x68, 0xb6, 0xd0, 0x1b, 0xba, 0x07, 0x00, 0x00,
}
