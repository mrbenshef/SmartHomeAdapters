// Code generated by protoc-gen-go. DO NOT EDIT.
// source: infoserver/infoserver.proto

package infoserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RobotQuery struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RobotQuery) Reset()         { *m = RobotQuery{} }
func (m *RobotQuery) String() string { return proto.CompactTextString(m) }
func (*RobotQuery) ProtoMessage()    {}
func (*RobotQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_infoserver_419072c474cce36e, []int{0}
}
func (m *RobotQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RobotQuery.Unmarshal(m, b)
}
func (m *RobotQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RobotQuery.Marshal(b, m, deterministic)
}
func (dst *RobotQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RobotQuery.Merge(dst, src)
}
func (m *RobotQuery) XXX_Size() int {
	return xxx_messageInfo_RobotQuery.Size(m)
}
func (m *RobotQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_RobotQuery.DiscardUnknown(m)
}

var xxx_messageInfo_RobotQuery proto.InternalMessageInfo

func (m *RobotQuery) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ToggleRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Value                bool     `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Force                bool     `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ToggleRequest) Reset()         { *m = ToggleRequest{} }
func (m *ToggleRequest) String() string { return proto.CompactTextString(m) }
func (*ToggleRequest) ProtoMessage()    {}
func (*ToggleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_infoserver_419072c474cce36e, []int{1}
}
func (m *ToggleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ToggleRequest.Unmarshal(m, b)
}
func (m *ToggleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ToggleRequest.Marshal(b, m, deterministic)
}
func (dst *ToggleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToggleRequest.Merge(dst, src)
}
func (m *ToggleRequest) XXX_Size() int {
	return xxx_messageInfo_ToggleRequest.Size(m)
}
func (m *ToggleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ToggleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ToggleRequest proto.InternalMessageInfo

func (m *ToggleRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ToggleRequest) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

func (m *ToggleRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

type Robot struct {
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Nickname      string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	RobotType     string `protobuf:"bytes,3,opt,name=robotType,proto3" json:"robotType,omitempty"`
	InterfaceType string `protobuf:"bytes,4,opt,name=interfaceType,proto3" json:"interfaceType,omitempty"`
	// Types that are valid to be assigned to RobotStatus:
	//	*Robot_ToggleStatus
	//	*Robot_RangeStatus
	RobotStatus          isRobot_RobotStatus `protobuf_oneof:"robotStatus"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Robot) Reset()         { *m = Robot{} }
func (m *Robot) String() string { return proto.CompactTextString(m) }
func (*Robot) ProtoMessage()    {}
func (*Robot) Descriptor() ([]byte, []int) {
	return fileDescriptor_infoserver_419072c474cce36e, []int{2}
}
func (m *Robot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Robot.Unmarshal(m, b)
}
func (m *Robot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Robot.Marshal(b, m, deterministic)
}
func (dst *Robot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Robot.Merge(dst, src)
}
func (m *Robot) XXX_Size() int {
	return xxx_messageInfo_Robot.Size(m)
}
func (m *Robot) XXX_DiscardUnknown() {
	xxx_messageInfo_Robot.DiscardUnknown(m)
}

var xxx_messageInfo_Robot proto.InternalMessageInfo

func (m *Robot) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Robot) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *Robot) GetRobotType() string {
	if m != nil {
		return m.RobotType
	}
	return ""
}

func (m *Robot) GetInterfaceType() string {
	if m != nil {
		return m.InterfaceType
	}
	return ""
}

type isRobot_RobotStatus interface {
	isRobot_RobotStatus()
}

type Robot_ToggleStatus struct {
	ToggleStatus *ToggleStatus `protobuf:"bytes,5,opt,name=toggleStatus,proto3,oneof"`
}

type Robot_RangeStatus struct {
	RangeStatus *RangeStatus `protobuf:"bytes,6,opt,name=rangeStatus,proto3,oneof"`
}

func (*Robot_ToggleStatus) isRobot_RobotStatus() {}

func (*Robot_RangeStatus) isRobot_RobotStatus() {}

func (m *Robot) GetRobotStatus() isRobot_RobotStatus {
	if m != nil {
		return m.RobotStatus
	}
	return nil
}

func (m *Robot) GetToggleStatus() *ToggleStatus {
	if x, ok := m.GetRobotStatus().(*Robot_ToggleStatus); ok {
		return x.ToggleStatus
	}
	return nil
}

func (m *Robot) GetRangeStatus() *RangeStatus {
	if x, ok := m.GetRobotStatus().(*Robot_RangeStatus); ok {
		return x.RangeStatus
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Robot) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Robot_OneofMarshaler, _Robot_OneofUnmarshaler, _Robot_OneofSizer, []interface{}{
		(*Robot_ToggleStatus)(nil),
		(*Robot_RangeStatus)(nil),
	}
}

func _Robot_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Robot)
	// robotStatus
	switch x := m.RobotStatus.(type) {
	case *Robot_ToggleStatus:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ToggleStatus); err != nil {
			return err
		}
	case *Robot_RangeStatus:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RangeStatus); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Robot.RobotStatus has unexpected type %T", x)
	}
	return nil
}

func _Robot_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Robot)
	switch tag {
	case 5: // robotStatus.toggleStatus
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ToggleStatus)
		err := b.DecodeMessage(msg)
		m.RobotStatus = &Robot_ToggleStatus{msg}
		return true, err
	case 6: // robotStatus.rangeStatus
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RangeStatus)
		err := b.DecodeMessage(msg)
		m.RobotStatus = &Robot_RangeStatus{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Robot_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Robot)
	// robotStatus
	switch x := m.RobotStatus.(type) {
	case *Robot_ToggleStatus:
		s := proto.Size(x.ToggleStatus)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Robot_RangeStatus:
		s := proto.Size(x.RangeStatus)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ToggleStatus struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ToggleStatus) Reset()         { *m = ToggleStatus{} }
func (m *ToggleStatus) String() string { return proto.CompactTextString(m) }
func (*ToggleStatus) ProtoMessage()    {}
func (*ToggleStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_infoserver_419072c474cce36e, []int{3}
}
func (m *ToggleStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ToggleStatus.Unmarshal(m, b)
}
func (m *ToggleStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ToggleStatus.Marshal(b, m, deterministic)
}
func (dst *ToggleStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToggleStatus.Merge(dst, src)
}
func (m *ToggleStatus) XXX_Size() int {
	return xxx_messageInfo_ToggleStatus.Size(m)
}
func (m *ToggleStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ToggleStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ToggleStatus proto.InternalMessageInfo

func (m *ToggleStatus) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type RangeStatus struct {
	Max                  int64    `protobuf:"varint,1,opt,name=max,proto3" json:"max,omitempty"`
	Min                  int64    `protobuf:"varint,2,opt,name=min,proto3" json:"min,omitempty"`
	Current              int64    `protobuf:"varint,3,opt,name=current,proto3" json:"current,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RangeStatus) Reset()         { *m = RangeStatus{} }
func (m *RangeStatus) String() string { return proto.CompactTextString(m) }
func (*RangeStatus) ProtoMessage()    {}
func (*RangeStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_infoserver_419072c474cce36e, []int{4}
}
func (m *RangeStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RangeStatus.Unmarshal(m, b)
}
func (m *RangeStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RangeStatus.Marshal(b, m, deterministic)
}
func (dst *RangeStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangeStatus.Merge(dst, src)
}
func (m *RangeStatus) XXX_Size() int {
	return xxx_messageInfo_RangeStatus.Size(m)
}
func (m *RangeStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_RangeStatus.DiscardUnknown(m)
}

var xxx_messageInfo_RangeStatus proto.InternalMessageInfo

func (m *RangeStatus) GetMax() int64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *RangeStatus) GetMin() int64 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *RangeStatus) GetCurrent() int64 {
	if m != nil {
		return m.Current
	}
	return 0
}

type CalibrationRequest struct {
	Id                   string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Parameters           []*CalibrationParameter `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *CalibrationRequest) Reset()         { *m = CalibrationRequest{} }
func (m *CalibrationRequest) String() string { return proto.CompactTextString(m) }
func (*CalibrationRequest) ProtoMessage()    {}
func (*CalibrationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_infoserver_419072c474cce36e, []int{5}
}
func (m *CalibrationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalibrationRequest.Unmarshal(m, b)
}
func (m *CalibrationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalibrationRequest.Marshal(b, m, deterministic)
}
func (dst *CalibrationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalibrationRequest.Merge(dst, src)
}
func (m *CalibrationRequest) XXX_Size() int {
	return xxx_messageInfo_CalibrationRequest.Size(m)
}
func (m *CalibrationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CalibrationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CalibrationRequest proto.InternalMessageInfo

func (m *CalibrationRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CalibrationRequest) GetParameters() []*CalibrationParameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type CalibrationParameter struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CalibrationParameter) Reset()         { *m = CalibrationParameter{} }
func (m *CalibrationParameter) String() string { return proto.CompactTextString(m) }
func (*CalibrationParameter) ProtoMessage()    {}
func (*CalibrationParameter) Descriptor() ([]byte, []int) {
	return fileDescriptor_infoserver_419072c474cce36e, []int{6}
}
func (m *CalibrationParameter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalibrationParameter.Unmarshal(m, b)
}
func (m *CalibrationParameter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalibrationParameter.Marshal(b, m, deterministic)
}
func (dst *CalibrationParameter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalibrationParameter.Merge(dst, src)
}
func (m *CalibrationParameter) XXX_Size() int {
	return xxx_messageInfo_CalibrationParameter.Size(m)
}
func (m *CalibrationParameter) XXX_DiscardUnknown() {
	xxx_messageInfo_CalibrationParameter.DiscardUnknown(m)
}

var xxx_messageInfo_CalibrationParameter proto.InternalMessageInfo

func (m *CalibrationParameter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CalibrationParameter) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type CalibrationParameters struct {
	Parameters           []*CalibrationParameter `protobuf:"bytes,1,rep,name=parameters,proto3" json:"parameters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *CalibrationParameters) Reset()         { *m = CalibrationParameters{} }
func (m *CalibrationParameters) String() string { return proto.CompactTextString(m) }
func (*CalibrationParameters) ProtoMessage()    {}
func (*CalibrationParameters) Descriptor() ([]byte, []int) {
	return fileDescriptor_infoserver_419072c474cce36e, []int{7}
}
func (m *CalibrationParameters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalibrationParameters.Unmarshal(m, b)
}
func (m *CalibrationParameters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalibrationParameters.Marshal(b, m, deterministic)
}
func (dst *CalibrationParameters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalibrationParameters.Merge(dst, src)
}
func (m *CalibrationParameters) XXX_Size() int {
	return xxx_messageInfo_CalibrationParameters.Size(m)
}
func (m *CalibrationParameters) XXX_DiscardUnknown() {
	xxx_messageInfo_CalibrationParameters.DiscardUnknown(m)
}

var xxx_messageInfo_CalibrationParameters proto.InternalMessageInfo

func (m *CalibrationParameters) GetParameters() []*CalibrationParameter {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type SetUsecaseRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Usecase              string   `protobuf:"bytes,2,opt,name=usecase,proto3" json:"usecase,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetUsecaseRequest) Reset()         { *m = SetUsecaseRequest{} }
func (m *SetUsecaseRequest) String() string { return proto.CompactTextString(m) }
func (*SetUsecaseRequest) ProtoMessage()    {}
func (*SetUsecaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_infoserver_419072c474cce36e, []int{8}
}
func (m *SetUsecaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetUsecaseRequest.Unmarshal(m, b)
}
func (m *SetUsecaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetUsecaseRequest.Marshal(b, m, deterministic)
}
func (dst *SetUsecaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetUsecaseRequest.Merge(dst, src)
}
func (m *SetUsecaseRequest) XXX_Size() int {
	return xxx_messageInfo_SetUsecaseRequest.Size(m)
}
func (m *SetUsecaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetUsecaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetUsecaseRequest proto.InternalMessageInfo

func (m *SetUsecaseRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SetUsecaseRequest) GetUsecase() string {
	if m != nil {
		return m.Usecase
	}
	return ""
}

func init() {
	proto.RegisterType((*RobotQuery)(nil), "RobotQuery")
	proto.RegisterType((*ToggleRequest)(nil), "ToggleRequest")
	proto.RegisterType((*Robot)(nil), "Robot")
	proto.RegisterType((*ToggleStatus)(nil), "ToggleStatus")
	proto.RegisterType((*RangeStatus)(nil), "RangeStatus")
	proto.RegisterType((*CalibrationRequest)(nil), "CalibrationRequest")
	proto.RegisterType((*CalibrationParameter)(nil), "CalibrationParameter")
	proto.RegisterType((*CalibrationParameters)(nil), "CalibrationParameters")
	proto.RegisterType((*SetUsecaseRequest)(nil), "SetUsecaseRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InfoServerClient is the client API for InfoServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InfoServerClient interface {
	GetRobot(ctx context.Context, in *RobotQuery, opts ...grpc.CallOption) (*Robot, error)
	GetRobots(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (InfoServer_GetRobotsClient, error)
	ToggleRobot(ctx context.Context, in *ToggleRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CalibrateRobot(ctx context.Context, in *CalibrationRequest, opts ...grpc.CallOption) (*Robot, error)
	GetCalibration(ctx context.Context, in *RobotQuery, opts ...grpc.CallOption) (*CalibrationParameters, error)
	SetUsecase(ctx context.Context, in *SetUsecaseRequest, opts ...grpc.CallOption) (*Robot, error)
}

type infoServerClient struct {
	cc *grpc.ClientConn
}

func NewInfoServerClient(cc *grpc.ClientConn) InfoServerClient {
	return &infoServerClient{cc}
}

func (c *infoServerClient) GetRobot(ctx context.Context, in *RobotQuery, opts ...grpc.CallOption) (*Robot, error) {
	out := new(Robot)
	err := c.cc.Invoke(ctx, "/InfoServer/GetRobot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerClient) GetRobots(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (InfoServer_GetRobotsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_InfoServer_serviceDesc.Streams[0], "/InfoServer/GetRobots", opts...)
	if err != nil {
		return nil, err
	}
	x := &infoServerGetRobotsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InfoServer_GetRobotsClient interface {
	Recv() (*Robot, error)
	grpc.ClientStream
}

type infoServerGetRobotsClient struct {
	grpc.ClientStream
}

func (x *infoServerGetRobotsClient) Recv() (*Robot, error) {
	m := new(Robot)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *infoServerClient) ToggleRobot(ctx context.Context, in *ToggleRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/InfoServer/ToggleRobot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerClient) CalibrateRobot(ctx context.Context, in *CalibrationRequest, opts ...grpc.CallOption) (*Robot, error) {
	out := new(Robot)
	err := c.cc.Invoke(ctx, "/InfoServer/CalibrateRobot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerClient) GetCalibration(ctx context.Context, in *RobotQuery, opts ...grpc.CallOption) (*CalibrationParameters, error) {
	out := new(CalibrationParameters)
	err := c.cc.Invoke(ctx, "/InfoServer/GetCalibration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoServerClient) SetUsecase(ctx context.Context, in *SetUsecaseRequest, opts ...grpc.CallOption) (*Robot, error) {
	out := new(Robot)
	err := c.cc.Invoke(ctx, "/InfoServer/SetUsecase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfoServerServer is the server API for InfoServer service.
type InfoServerServer interface {
	GetRobot(context.Context, *RobotQuery) (*Robot, error)
	GetRobots(*empty.Empty, InfoServer_GetRobotsServer) error
	ToggleRobot(context.Context, *ToggleRequest) (*empty.Empty, error)
	CalibrateRobot(context.Context, *CalibrationRequest) (*Robot, error)
	GetCalibration(context.Context, *RobotQuery) (*CalibrationParameters, error)
	SetUsecase(context.Context, *SetUsecaseRequest) (*Robot, error)
}

func RegisterInfoServerServer(s *grpc.Server, srv InfoServerServer) {
	s.RegisterService(&_InfoServer_serviceDesc, srv)
}

func _InfoServer_GetRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RobotQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServer).GetRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InfoServer/GetRobot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServer).GetRobot(ctx, req.(*RobotQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServer_GetRobots_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InfoServerServer).GetRobots(m, &infoServerGetRobotsServer{stream})
}

type InfoServer_GetRobotsServer interface {
	Send(*Robot) error
	grpc.ServerStream
}

type infoServerGetRobotsServer struct {
	grpc.ServerStream
}

func (x *infoServerGetRobotsServer) Send(m *Robot) error {
	return x.ServerStream.SendMsg(m)
}

func _InfoServer_ToggleRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServer).ToggleRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InfoServer/ToggleRobot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServer).ToggleRobot(ctx, req.(*ToggleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServer_CalibrateRobot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalibrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServer).CalibrateRobot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InfoServer/CalibrateRobot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServer).CalibrateRobot(ctx, req.(*CalibrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServer_GetCalibration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RobotQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServer).GetCalibration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InfoServer/GetCalibration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServer).GetCalibration(ctx, req.(*RobotQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoServer_SetUsecase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUsecaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServerServer).SetUsecase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InfoServer/SetUsecase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServerServer).SetUsecase(ctx, req.(*SetUsecaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InfoServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "InfoServer",
	HandlerType: (*InfoServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRobot",
			Handler:    _InfoServer_GetRobot_Handler,
		},
		{
			MethodName: "ToggleRobot",
			Handler:    _InfoServer_ToggleRobot_Handler,
		},
		{
			MethodName: "CalibrateRobot",
			Handler:    _InfoServer_CalibrateRobot_Handler,
		},
		{
			MethodName: "GetCalibration",
			Handler:    _InfoServer_GetCalibration_Handler,
		},
		{
			MethodName: "SetUsecase",
			Handler:    _InfoServer_SetUsecase_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRobots",
			Handler:       _InfoServer_GetRobots_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "infoserver/infoserver.proto",
}

func init() {
	proto.RegisterFile("infoserver/infoserver.proto", fileDescriptor_infoserver_419072c474cce36e)
}

var fileDescriptor_infoserver_419072c474cce36e = []byte{
	// 512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x5d, 0x6f, 0xda, 0x30,
	0x14, 0x25, 0x50, 0x28, 0xb9, 0x01, 0xb4, 0x79, 0x6d, 0x15, 0xd1, 0x3e, 0xb0, 0xa8, 0x0f, 0x68,
	0x0f, 0xa6, 0xa2, 0x9a, 0xfa, 0x34, 0x69, 0xda, 0x34, 0xb5, 0x53, 0xa5, 0x69, 0x33, 0xec, 0x69,
	0x4f, 0x26, 0xbd, 0x89, 0xa2, 0x81, 0xcd, 0x1c, 0xa7, 0x1a, 0xbf, 0x6a, 0xbf, 0x6c, 0xff, 0x61,
	0x8a, 0x4d, 0x96, 0xa4, 0x80, 0xd4, 0x37, 0x9f, 0xe3, 0x73, 0x3f, 0x7c, 0x7d, 0x0f, 0x9c, 0x27,
	0x22, 0x92, 0x29, 0xaa, 0x47, 0x54, 0x93, 0xf2, 0x48, 0xd7, 0x4a, 0x6a, 0x39, 0x3c, 0x8f, 0xa5,
	0x8c, 0x97, 0x38, 0x31, 0x68, 0x91, 0x45, 0x13, 0x5c, 0xad, 0xf5, 0xc6, 0x5e, 0x06, 0x17, 0x00,
	0x4c, 0x2e, 0xa4, 0xfe, 0x96, 0xa1, 0xda, 0x90, 0x01, 0x34, 0x93, 0x07, 0xdf, 0x19, 0x39, 0x63,
	0x97, 0x35, 0x93, 0x87, 0xe0, 0x1e, 0xfa, 0x73, 0x19, 0xc7, 0x4b, 0x64, 0xf8, 0x2b, 0xc3, 0x54,
	0x3f, 0x15, 0x90, 0x13, 0x68, 0x3f, 0xf2, 0x65, 0x86, 0x7e, 0x73, 0xe4, 0x8c, 0xbb, 0xcc, 0x82,
	0x9c, 0x8d, 0xa4, 0x0a, 0xd1, 0x6f, 0x59, 0xd6, 0x80, 0xe0, 0xaf, 0x03, 0x6d, 0x53, 0x6b, 0x27,
	0xcb, 0x10, 0xba, 0x22, 0x09, 0x7f, 0x0a, 0xbe, 0xb2, 0x89, 0x5c, 0xf6, 0x1f, 0x93, 0x0b, 0x70,
	0x55, 0x1e, 0x34, 0xdf, 0xac, 0x6d, 0x3e, 0x97, 0x95, 0x04, 0xb9, 0x84, 0x7e, 0x22, 0x34, 0xaa,
	0x88, 0x87, 0x68, 0x14, 0x47, 0x46, 0x51, 0x27, 0xc9, 0x35, 0xf4, 0xb4, 0x79, 0xc6, 0x4c, 0x73,
	0x9d, 0xa5, 0x7e, 0x7b, 0xe4, 0x8c, 0xbd, 0x69, 0x9f, 0xce, 0x2b, 0xe4, 0x5d, 0x83, 0xd5, 0x44,
	0xe4, 0x0a, 0x3c, 0xc5, 0x45, 0x5c, 0xc4, 0x74, 0x4c, 0x4c, 0x8f, 0xb2, 0x92, 0xbb, 0x6b, 0xb0,
	0xaa, 0xe4, 0x43, 0x1f, 0x3c, 0xd3, 0x99, 0x85, 0xc1, 0x25, 0xf4, 0xaa, 0x05, 0xca, 0x59, 0x39,
	0x95, 0x59, 0x05, 0xf7, 0xe0, 0x55, 0x52, 0x92, 0x17, 0xd0, 0x5a, 0xf1, 0xdf, 0x46, 0xd2, 0x62,
	0xf9, 0xd1, 0x30, 0x89, 0x30, 0x73, 0xc9, 0x99, 0x44, 0x10, 0x1f, 0x8e, 0xc3, 0x4c, 0x29, 0x14,
	0xda, 0x0c, 0xa4, 0xc5, 0x0a, 0x18, 0xfc, 0x00, 0xf2, 0x91, 0x2f, 0x93, 0x85, 0xe2, 0x3a, 0x91,
	0xe2, 0xd0, 0xa7, 0xbd, 0x05, 0x58, 0x73, 0xc5, 0x57, 0xa8, 0x51, 0xa5, 0x7e, 0x73, 0xd4, 0x1a,
	0x7b, 0xd3, 0x53, 0x5a, 0x09, 0xfc, 0x5a, 0xdc, 0xb2, 0x8a, 0x30, 0x78, 0x0f, 0x27, 0xfb, 0x34,
	0x84, 0xc0, 0x91, 0xf9, 0x39, 0x5b, 0xc0, 0x9c, 0xeb, 0x7b, 0xe1, 0x16, 0x6f, 0xfd, 0x02, 0xa7,
	0xfb, 0x32, 0xa4, 0x4f, 0x3a, 0x72, 0x9e, 0xdb, 0xd1, 0x3b, 0x78, 0x39, 0x43, 0xfd, 0x3d, 0xc5,
	0x90, 0xa7, 0x07, 0x57, 0xd4, 0x87, 0xe3, 0xcc, 0x2a, 0xb6, 0xcd, 0x14, 0x70, 0xfa, 0xa7, 0x09,
	0xf0, 0x59, 0x44, 0x72, 0x66, 0xdc, 0x42, 0x5e, 0x43, 0xf7, 0x16, 0xb5, 0xdd, 0x50, 0x8f, 0x96,
	0xae, 0x18, 0x76, 0x2c, 0x08, 0x1a, 0x64, 0x02, 0x6e, 0x21, 0x49, 0xc9, 0x19, 0xb5, 0xc6, 0xa2,
	0x85, 0xb1, 0xe8, 0xa7, 0xdc, 0x58, 0xa5, 0xfc, 0xca, 0x21, 0x37, 0xe0, 0x6d, 0x0d, 0x64, 0x17,
	0x9f, 0xd6, 0xec, 0x34, 0x3c, 0x90, 0xc2, 0x54, 0x1a, 0x14, 0xcf, 0xdf, 0xc6, 0xbe, 0xa2, 0xbb,
	0x5f, 0x5b, 0x69, 0xed, 0x06, 0x06, 0xb7, 0xa8, 0x2b, 0x92, 0xfa, 0x1b, 0xce, 0xf6, 0x4e, 0x33,
	0x0d, 0x1a, 0xe4, 0x0d, 0x40, 0x39, 0x44, 0x42, 0xe8, 0xce, 0x44, 0xcb, 0x22, 0x8b, 0x8e, 0xe9,
	0xf3, 0xfa, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3a, 0x7f, 0x23, 0xda, 0x70, 0x04, 0x00, 0x00,
}
